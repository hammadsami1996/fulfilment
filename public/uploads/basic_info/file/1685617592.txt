<?php

namespace App\Http\Controllers;

use App\Excels;
use App\Exports\ExportExcel;
use App\Imports\Product_Bulk_Import_Excel;
//use App\Models\Addon_master;
use App\Models\Category_master;
use App\Models\Product;
use App\Models\Product_Gallery;
use App\Models\Product_Image;
use App\Models\Product_video;

use App\Models\ProductAttribute;
use App\Models\ProductAttributeValue;
//use App\Models\Related_product_master;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Facades\Excel;

class ProductController extends Controller
{
    public function exportUsers(Request $request)
    {
        $data = \App\Models\Excels::select('first_name', 'last_name', 'email')->get();
        return Excel::download(new ExportExcel($data), 'Customer.xlsx');
//        return Excel::download(new ExportExcel, 'Customer.xlsx');
    }

    public function product_bulk_import(Request $request)
    {
//        $request->validate([
//        ]);
//  dd(isset($request->file));
        if(isset($request->file))
        {
            Excel::import(new Product_Bulk_Import_Excel, $request->file('file'));
            return response()->json(['saved' => true, 'msg' => 'Record Inserted Successfully']);
        }

        return response()->json(['saved' => false, 'msg' => 'Error'],422);

    }

    public function CopyToAll($id)
    {


        $child_ids = Product::where('parent_id', $id)->get();
        $parent_images = DB::select("select * from products_images where deleted =0 and products = $id");

        $ids = [];
        foreach ($child_ids as $child_id) {
            $idsa = $child_id->id;
            $ids[] = $child_id->id;
            $count = count($ids);
        }
        if ($count > 0) {
            $results = Product_Image::whereIn('products', $ids)->delete();

        }
        $img = [];
        $check_id = [];


        foreach ($child_ids as $child_id) {
            $idsa = $child_id->id;
            $ids[] = $child_id->id;
            $count = count($ids);

            foreach ($parent_images as $images) {
                $img[] = $images->images;
                $check_id[] = $images->id;

//            $aa = new  Product_Image::
//            whereIn('products', $ids)
//            ->whereIn('images', $img)
//               ;

                DB::table('products_images')->insert(
                    ['products' => $idsa,
                        'images' => $images->images,
                        'md_images' => $images->md_images,
                        'sm_images' => $images->sm_images,

                    ]);

            }
        }

        return response()->json(['check_id' => $check_id, 'saved' => true]);


    }

//old not in use code

//    public function image_gallery_child($id)
//    {
////        dd($id);
//        $data = Product_Image::when(request('id'), function ($q) {
//            $q->where('products', 'LIKE', request('id'));
//        })->get();
////        dd(count($data));
//        return response()
//            ->json(['data' => $data]);
//    }

    public function product_gallery($id)
    {
//        dd($id);
        $data = Product_Image::when(request('id'), function ($q) {
            $q->where('products', 'LIKE', request('id'));
        })->get();
        $images = [];
        foreach ($data as $image) {
            $images[] = $image->images;
        }
        $path = [];
        foreach ($images as $image) {
            $fimages = Str::of($image)->start('/uploads/product/image_gallery');
            $path[] = $fimages;
        }


        return response()
            ->json(['data' => $data, 'media' => $images, 'path' => $path]);
    }

    public function search()
    {

        $results = Product::orderBY('title')
            ->when(request('q'), function ($q) {
                $q->where('barcode', 'like', '%' . request('q') . '%')
                    ->orWhere('title', 'like', '%' . request('q') . '%')
                    ->orWhere('model_no', 'like', '%' . request('q') . '%');
//                    ->orWhere('phone', 'like', '%' . request('q') . '%');
            })
            ->limit(6)->get();
        return response()
            ->json(['results' => $results]);
    }
//    public function search()
//    {
//
//        $results= Product::limit(6)->get();
//        return response()
//            ->json(['results' => $results]);
//    }
    public function index()
    {

        $data = Product::when(request('search'), function ($q) {
            $q->where('title', 'LIKE', '%' . request('search') . '%');
        })
            ->orderBy('id','DESC')
            ->paginate(request('per_page') ? request('per_page') : 25);
        return response()->json(['data' => $data]);

//        $data = Product::paginate(request('per_page') ? request('per_page') : 25);
//        return response()->json(['data' => $data]);

    }

    public function create()
    {
        $form = [
            'url' => null,
            'parent_id' => null,
            'sort' => null,
            'brands' => null,
            'barcode' => null,
            'shorturl' => null,
            'merchants' => null,
            'products_behave' => null,
            '$category' => null,
            'model_no' => null,
            'product_code' => null,
            'images' => null,
            'size_chart' => null,
            'title' => null,
            'sub_title' => null,
            'slug' => null,
            'price' => null,
            'discounted' => null,
            'discount_percent' => null,
            'fake_sold' => null,
            'real_sold' => null,
            'purchase_limit' => null,
            'start_date' => null,
            'end_date' => null,
            'expiration_date' => null,
            'meta_title' => null,
            'meta_keyword' => null,
            'meta_description' => null,
            'short_description' => null,
            'description' => null,
            'specification' => null,
            'show_timer' => null,
            'timer_text' => null,
            'qrcode' => null,
            'show_on_front' => null,
            'attributes_type' => null,
            'cities' => null,
            'status' => null,
            'indianking' => null,
            'barkat' => null,
            'barkat_supplier_code' => null,
            'bump_sale' => null,
            'upselling' => null,
            'lens_items' => null,
//            'addon_product' => null,
            'addon_products_title' => null,
            'addon_products_type' => null,
            'delivery_time' => null,
            'return_note' => null,
            'return_policy' => null,
            'faqs' => null,
            'warranty' => null,
            'seller_note' => 'Random Color Will Be Sent',
            'approved' => null,
            'disapproval_reason' => null,
            'country_id' => null,
            'merchant_message' => null,
            'fine_prints' => null,
            'highlights' => null,
            'deal_type' => null,
            'terms_conditions' => null,
            'minimum_limit' => null,
            'maximum_limit' => null,
            'quantity' => null,
            'shipment_charges' => null,
            'refer' => null,
            'free_shipping' => null,
            'manage_inventory' => null,
            'product_qty' => null,
            'status_qty' => null,
            'out_of_stock' => null,
            'noindex' => null,
            'expired' => null,
            'active' => null,
            'add_by' => null,
            'createdon' => null,
            'edit_by' => null,
            'updatedon' => null,
            'deleted_by' => null,
            'deleted' => null,
            'ogimage' => null,
            'pulled' => null,
            'attribute_set' => null,
            'product_types' => null,
//            'related_product' => null,
            'product_sku' => null,
            'categoryies' => null,
            'cost' => null,
            'amount' => null,
            'group' => [
                'attribute_value' => [],
            ],
            'attribute_value' => [],
            'ghi' => [],
            'test' => [],
            'variation' => [],

        ];

        return response()
            ->json(['form' => $form]);
    }
//mera wala jo code tha usma sa st
    public function store(Request $request){

//        dd($request->variation);
//        dd($request->categoryies);
//        dd($request->addon_product );
        $category = null;
        $addon_pro = null;
        $related_pro = null;
        $category_pro = null;
        $category1 = null;
        $meta_key = null;
        $variation_product = null;
        if ($request->categoryies != null) {
            foreach ($request->categoryies as $categorie) {
                $categories[] = $categorie['id'];
            }
            $category_pro = implode(",", $categories);
        } else{
            $category_pro = '';
        }

//        if ($request->addon_product != null) {
//            foreach ($request->addon_product as $addon_produc) {
//                $addo_product[] = $addon_produc['id'];
//            }
//            $addon_pro = implode(",", $addo_product);
//        } else {
//            $addon_pro = '';
//        }
//        if ($request->related_product != null) {
//            foreach ($request->related_product as $related_produc) {
//                $relado_product[] = $related_produc['id'];
//            }
//            $related_pro = implode(",", $relado_product);
//        } else {
//            $related_pro = '';
//        }

        if (isset($request->meta)) {
            $meta_key = implode(",", $request->meta);

        }


        $un_vari = null;

        if (isset($request->variation)) {
            foreach ($request->variation as $key => $val) {
                $un_vari[$key] = $val;

            }
        }
        if (isset($request->variation)) {
            foreach ($request->test as $key => $val) {
                $prd[] = $val;
                $prd[$key]['variation'] = $un_vari[$key];
            }
        }


        if (isset($request->variation)) {
            foreach ($prd as $product_values) {
                if ($product_values['variation'] == '1') {
                    $variation_product[] = $product_values;
                } else {
                    $non_variation_product[] = $product_values;
                }
            }
        }

        if (isset($variation_product)) {
            $elements = count($variation_product);
            for ($i = 0; $i < $elements; $i++) {
                if (array_key_exists('variation', $variation_product[$i])) {
                    if ($variation_product[$i]['variation'] == "1") {
                        unset($variation_product[$i]['variation']);
                    }
                }
            }
        }
        if (isset($non_variation_product)) {
            $elements = count($non_variation_product);
            for ($i = 0; $i < $elements; $i++) {
                if (array_key_exists('variation', $non_variation_product[$i])) {
                    if ($non_variation_product[$i]['variation'] == "0") {
                        unset($non_variation_product[$i]['variation']);
                    }
                }
            }
        }
        if (isset($variation_product)) {
            $colour = $variation_product[0];
            $size = $variation_product[1];
//            $print = $variation_product[2];
            $res = $this->getCombinations($colour, $size);
            $count = count($variation_product);
//dd($res);
        }
        if (isset($res)) {
            foreach ($res as $item) {
                $arr = $item;
            }
        }

        $vari_id = ProductAttributeValue::where('id', 3)->first();
//        $addon_pro = implode(",", $addo_product);
//        $related_pro = implode(",", $relado_product);
//        $category = implode(",", $categories);
//        $category1 = implode(",", $categories1);

        $product = new Product;
        $product->fill($request->all());

        if ($request->hasfile('SizeImgs')) {

            $file = $request->file('SizeImgs');
            $destinationPath = public_path('uploads/product/product_gallery');
            if (!file_exists($destinationPath)) {
                mkdir($destinationPath, 0777, true);
            }
            $fileName = time() . '_' . $file->getClientOriginalName();
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(800, 800, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileName);

            $fileNameM = 'md_'.$fileName;
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(300, 300, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileNameM);

            $fileNameS = 'sm_'.$fileName;
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(100, 100, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileNameS);


            $product->size_chart = $fileName;


//            $file = $request->file('SizeImgs');
////            $extension = $file->getClientOriginalExtension();
//            $extension = $file->getClientOriginalName();
//            $filename = time() . '_' . $extension;
//            $file->move('uploads/product/product_gallery', $filename);
//            $product->size_chart = $filename;

        }
        if ($request->hasfile('MetaImgs')) {

            $file = $request->file('MetaImgs');
            $extension = $file->getClientOriginalName();
            $filename = time() . '_' . $extension;
            $file->move('uploads/product/meta_image', $filename);
            $product->meta_image = $filename;

        }

        $product->parent_id = 0;
        $product->categories = $category_pro;
        $product->addon_products = $addon_pro;
        $product->related_products = $related_pro;
        $product->meta_keywords = $meta_key;
        $product->indianking = 0;
        $product->barkat = 0;
        $product->barkat_supplier_code = 0;
        $product->addon_products_type = 0;
        $product->free_shipping = 0;
//    $product->manage_inventory = 0;
        $product->status_qty = 0;
        $product->out_of_stock = 0;
        $product->noindex = 0;
        $product->expired = 0;
        $product->active = 0;
        $product->deleted = 0;
        $product->pulled = 0;
        $product->attribute_set = $request->attribute_set ? $request->attribute_set : 0;
        $product->manage_inventory  = $request->manage_inventory == true ? 1 : 0;
//        $product->sku = $request->product_sku ? $request->product_sku : 0;
//        dd($product);
        $product->save();


//        yahn pr ho ga save parent product
        DB::transaction(function () use ($request, $product, $category_pro, $addon_pro, $related_pro) {
            //multi img work
            if ($request->uploads != null) {
                $file = $request->file('uploads');

                foreach ($file as $img) {
                    $file = $img;
                    $destinationPath = public_path('uploads/product/product_gallery');
                    if (!file_exists($destinationPath)) {
                        mkdir($destinationPath, 0777, true);
                    }

                    $fileName = time() . '_' . $file->getClientOriginalName();
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(800, 800, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileName);

                    $fileNameM = 'md_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(300, 300, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameM);

                    $fileNameS = 'sm_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(100, 100, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameS);

//    Product_Image add
                    $product_image = new Product_Image();
                    $product_image->products = $product->id;
                    $product_image->images = $fileName;
                    $product_image->md_images = $fileNameM;
                    $product_image->sm_images = $fileNameS;
                    $product_image->save();

//    Product_Gallery add
                    $product_gallery = new Product_Gallery();
                    $product_gallery->create_date = now();
                    $product_gallery->added_by = Auth::user()->name;
                    $product_gallery->product_img = $fileName;
                    $product_gallery->save();

                }

                //Product_video add

                $product_video = new Product_video();
                $product_video->products = $product->id;
                $product_video->url = $request->url;
//                dd($product,$request->url );
                $product_video->save();




//                          foreach ($file as $image) {
//                    $building_image = new Product_Image();
//                    $name = str::random(10) . '.' . $image->extension();
//                    $building_image->products = $product->id;
//                    $building_image->title = $image->getClientOriginalName();
//                    $building_image->images = $name;
////                  $building_image->size = $image->getSize();
////                  $building_image->type = $image->extension();
//                    $image->move($path, $name);
//                    $building_image->save();
//                }
            }

//            $separate_tags1 = explode(',', $category1);
            if($category_pro !== '') {
                $product_category = explode(',', $category_pro);
                foreach ($product_category as $separate_tag) {
                    $product_category_master = new Category_master;
                    $product_category_master->product_id = $product->id;
                    $product_category_master->category_id = $separate_tag;
                    $product_category_master->save();
                }
            }
//            if($addon_pro !== '') {
//                $addon = explode(',', $addon_pro);
//                foreach ($addon as $separate_tag1) {
//                    $addon_master = new Addon_master();
//                    $addon_master->product_id = $product->id;
//                    $addon_master->addon_id = $separate_tag1;
//                    $addon_master->save();
//                }
//            }
//            if($related_pro !== '') {
//                $related_product = explode(',', $related_pro);
//                foreach ($related_product as $separate_tag2) {
//                    $related_product_master = new Related_product_master();
//                    $related_product_master->product_id = $product->id;
//                    $related_product_master->related_product_id = $separate_tag2;
//                    $related_product_master->save();
//                }
//            }

        });

        if (isset($request->vari)) {

//        if (isset($request->variation)) {

//            for ($i = 0; $i < $count; $i++) {
//                $part_attributes = new ProductAttribute();
//                $part_attributes->products = $product->id;
//                $part_attributes->groups = $vari_id['groups'];
//                $part_attributes->value = $vari_id['id'];
//                $part_attributes->value_title = $vari_id['title'];
//                $part_attributes->variation = 1;
//                $part_attributes->price = 0;
//                $part_attributes->active = 1;
//                $part_attributes->deleted = 1;
//                $part_attributes->save();

//                original code
            for ($i = 0; $i < $count; $i++) {
                $part_attributes = new ProductAttribute();
                $part_attributes->products = $product->id;
                $part_attributes->groups = $vari_id['groups'];
                $part_attributes->value = $vari_id['id'];
                $part_attributes->value_title = $vari_id['title'];
                $part_attributes->variation = 2;
                $part_attributes->price = 0;
                $part_attributes->active = 1;
                $part_attributes->deleted = 1;
                $part_attributes->save();

            }
        }
        if (isset($non_variation_product)) {
            foreach ($non_variation_product as $non_prod) {
                foreach ($non_prod as $pak) {
                    $attributes = new ProductAttribute();
                    $attributes->products = $product->id;
                    $attributes->groups = $pak['groups'];
                    $attributes->value = $pak['id'];
                    $attributes->value_title = $pak['title'];
                    $attributes->variation = 0;
                    $attributes->price = 0;
                    $attributes->active = 1;
                    $attributes->deleted = 1;
                    $attributes->save();
                }
            }
        }

        if (isset($res)) {
//            dd($res);
            foreach ($arr as $item1) {
//                dd($item1);
                $part_attributes = new ProductAttribute();
                $part_attributes->products = $product->id;
                $part_attributes->groups = $item1['groups'];
                $part_attributes->value = $vari_id['id'];
                $part_attributes->sku =$request->product_sku;
                $part_attributes->value_title = $vari_id['title'];
                $part_attributes->variation = 1;
                $part_attributes->price = 0;
                $part_attributes->active = 1;
                $part_attributes->deleted = 1;
                $part_attributes->save();
            }
            foreach ($res as $vari_product) {
//                dd('manage_inventory');
                $prod = new Product;
                $prod->fill($request->all());
                $prod->parent_id = $product->id;
                $prod->categories = $category_pro;
                $prod->addon_products = $addon_pro;
                $prod->meta_keywords = $meta_key;
                $prod->indianking = 0;
                $prod->barkat = 0;
                $prod->barkat_supplier_code = 0;
                $prod->addon_products_type = 0;
                $prod->free_shipping = 0;
                $product->manage_inventory  = $request->manage_inventory == true ? 1 : 0;
                $prod->status_qty = 0;
                $prod->out_of_stock = 0;
                $prod->noindex = 0;
                $prod->expired = 0;
                $prod->active = 0;
                $prod->deleted = 0;
                $prod->pulled = 0;
                $prod->attribute_set = $request->attribute_set ? $request->attribute_set : 0;
//                $prod->sku = $request->product_sku ? $request->product_sku : 0;
                $prod->save();

//dd($prod);
                if ($request->uploads != null) {
//                IMAGES FOR CHILD
                    DB::transaction(function () use ($request, $product, $prod) {
                        $a = Product_Image::where('products', $product->id)->get();
//                    dd(count($a));
                        foreach ($a as $b) {

                            $Product_Image = new Product_Image();
                            $Product_Image->products = $prod->id;
                            $Product_Image->images = $b->images;
                            $Product_Image->md_images = $b->md_images;
                            $Product_Image->sm_images = $b->sm_images;
                            $Product_Image->save();
                        }

                    });
                }
                foreach ($vari_product as $attribute) {

                    $attributes = new ProductAttribute();
                    $attributes->products = $prod->id;
                    $attributes->groups = $attribute['groups'];
                    $attributes->value = $attribute['id'];
                    $attributes->sku =$request->product_sku;
                    $attributes->value_title = $attribute['title'];
                    $attributes->variation = 1;
                    $attributes->price = 0;
                    $attributes->active = 1;
                    $attributes->deleted = 1;
                    $attributes->save();

                }

                if (isset($non_variation_product)) {
                    foreach ($non_variation_product as $non_prod) {
                        foreach ($non_prod as $pak) {
                            $attributes = new ProductAttribute();
                            $attributes->products = $prod->id;
                            $attributes->groups = $pak['groups'];
                            $attributes->value = $pak['id'];
                            $attributes->value_title = $pak['title'];
                            $attributes->variation = 0;
                            $attributes->price = 0;
                            $attributes->active = 1;
                            $attributes->deleted = 1;
                            $attributes->save();
                        }
                    }
                }
            }
        }
        return response()
            ->json(['saved' => true, 'id' => $product->id]);
    }

    function getCombinations(...$arrays)
    {
        $result = [[]];
        foreach ($arrays as $property => $property_values) {
            $tmp = [];
            foreach ($result as $result_item) {
                foreach ($property_values as $property_value) {
                    $tmp[] = array_merge($result_item, [$property => $property_value]);
                }
            }
            $result = $tmp;
        }
        return $result;
    }

    public function show($id)
    {
        $model = Product::findOrFail($id);

        return response()
            ->json(['model' => $model]);
    }

    public function edit($id)
    {
//        dd(request()->all());


//        dd($form['products_videos'] = Product_video::where('products', $id)->first());
//        dd($id);
//        dd($form);
        \DB::statement("SET SQL_MODE=''");
        $check = Product::where('parent_id', 0)->find($id);


//        Product::where('parent_id', 0)->find($id);
//        $check['products_videos'] = Product_video::where('products', $id)->first();


        if (isset($check)) {


//            $a = Product::with('prod_grp', 'prod_grp.prod_att')
//                ->where
//                ->get();
//
////            $a = Product::where('parent_id', $id)->get();
//            $Attibutes = [];
//            foreach ($a as $item) {
//                \DB::statement("SET SQL_MODE=''");
//                $Attibutes[] = ProductAttribute::where('products', $item->id)
//                    ->get()
////                      ->groupBy('value')
//               ;
//            }
//            query work

            $product_attributes = ProductAttribute::where('products', $id)->get();
            $details = ProductAttribute::where('products', $id)->get();


            $Attibutes = [];
            foreach ($product_attributes as $item) {
                $grp = $item->groups;

                \DB::statement("SET SQL_MODE=''");
                $Attibutes[] = DB::select("SELECT * FROM products_attributes as pa
            LEFT JOIN products_attributes_groups as pg ON pa.groups = pg.id
            where products in (select pd.id from products as pd where pd.parent_id = $id) and pa.groups = $grp  group by pa.value ");
            }

            //            query work
            $form = Product::with('childs_Product_Image', 'test', 'attribute_sets', 'product_type',   'categoryies', 'product_behaves', 'brand', 'warrantys', 'delivery_times', 'returns_note', 'bumps_sales', 'upsellings', 'product_video')->findOrFail($id);
//            $details = [];
//            $details = DB::select("SELECT p.*,group_concat(pa.group_title) as group_title,group_concat(pa.value_title separator '   ') as value_title,pa.products as p_id,p.sort as sort_attribute,pa.sku as sku ,pa.status as status FROM `products` p
//                inner join products_attributes pa on pa.products = p.id
//                where  p.parent_id = $id and p.deleted =0 and pa.variation =1 group by pa.products");
            $details = ProductAttribute::where('products', $id)->where('variation',1)->where('deleted',0)->get();
            foreach ($details as $key => $items) {
                $details[$key]->imgs = DB::select("SELECT * from products_images pi where pi.products = $items->id");
            }
//            foreach ($details as $item) {
//                $vaule_title = explode(',',$item->value_title);
//                $a= $vaule_title[0];
////                $b= $vaule_title[1];
//
//            }



        } else {
            \DB::statement("SET SQL_MODE=''");
            $a = Product::findorFail($id);
//            dd($a->parent_id);
            $id = $a->parent_id;
            $product_attributes = ProductAttribute::where('products', $id)->get();
            $details = ProductAttribute::where('products', $id)->get();
            $Attibutes = [];
            foreach ($product_attributes as $item) {
                $grp = $item->groups;

                \DB::statement("SET SQL_MODE=''");
                $Attibutes[] = DB::select("SELECT * FROM products_attributes as pa
            LEFT JOIN products_attributes_groups as pg ON pa.groups = pg.id
            where products in (select pd.id from products as pd where pd.parent_id = $id) and pa.groups = $grp  group by pa.value ");
            }
//            dd($details);
//            dd($form);

            $form = Product::with('childs_Product_Image', 'test', 'attribute_sets', 'product_type',   'categoryies', 'product_behaves', 'brand', 'warrantys', 'delivery_times', 'returns_note', 'bumps_sales', 'upsellings', 'product_video')->findOrFail($id);
//$form->products_videos = Product_video::where('products', $id)->first()

//            $form['products_videos'] = Product_video::where('products', $id)->first();
//            $details = [];
//            $details = DB::select("SELECT p.*,group_concat(pa.group_title) as group_title,group_concat(pa.value_title separator '   ') as value_title,pa.products as p_id,p.sort as sort_attribute,pa.sku as sku ,pa.status as status FROM `products` p
//    inner join products_attributes pa on pa.products = p.id
//    where  p.parent_id = $id and p.deleted =0 and pa.variation =1 group by pa.products");
//            foreach ($details as $key => $items) {
//                $details[$key]->imgs = DB::select("SELECT * from products_images pi where pi.products = " . $items->id . "");
//            }
            $details = ProductAttribute::where('products', $id)->where('variation',1)->where('deleted',0)->get();
            foreach ($details as $key => $items) {
                $details[$key]->imgs = DB::select("SELECT * from products_images pi where pi.products = $items->id");
            }
        }

        $form['product_videos'] =  Product_video::where('products', $id)->first();
        $products_videos = Product_video::where('products', $id)->first();


        return response()
            ->json(['form' => $form,
                'products_videos'=> $products_videos,
                'Attibutes' => $Attibutes,
                'details' => $details,
//                'a' => $a,
//                'b' => $b,
            ]);
    }

    public function update(Request $request, $id)
    {
        $category = null;
        $addon_pro = null;
        $related_pro = null;
        $category_pro = null;
        if ($request->categoryies != null) {
            foreach ($request->categoryies as $categorie) {
                $categories[] = $categorie['id'];
            }
            $category_pro = implode(",", $categories);
        } else{
            $category_pro = '';
        }

//        if ($request->addon_product != null) {
//            foreach ($request->addon_product as $addon_produc) {
//                $addo_product[] = $addon_produc['id'];
//            }
//            $addon_pro = implode(",", $addo_product);
//        } else {
//            $addon_pro = '';
//        }
//        if ($request->related_product != null) {
//            foreach ($request->related_product as $related_produc) {
//                $relado_product[] = $related_produc['id'];
//            }
//            $related_pro = implode(",", $relado_product);
//        } else {
//            $related_pro = '';
//        }

        $product = Product::findOrFail($id);
        $product->fill($request->all());

        if ($request->hasfile('SizeImgs')) {
            $file = $request->file('SizeImgs');
            $destinationPath = public_path('uploads/product/product_gallery');
            if (!file_exists($destinationPath)) {
                mkdir($destinationPath, 0777, true);
            }
            $fileName = time() . '_' . $file->getClientOriginalName();
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(800, 800, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileName);

            $fileNameM = 'md_'.$fileName;
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(300, 300, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileNameM);

            $fileNameS = 'sm_'.$fileName;
            $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
            $imgFile->resize(100, 100, function ($constraint) {
                $constraint->aspectRatio();
            })->save($destinationPath . '/' . $fileNameS);

            $product->size_chart = $fileName;

        }
        if ($request->hasfile('MetaImgs')) {
            $destination = 'uploads/product/meta_image/' . $product->meta_image;
            if (File::exists($destination)) {
                File::delete($destination);
            }
            $file = $request->file('MetaImgs');
            $extension = $file->getClientOriginalName();
            $filename = time() . '_' . $extension;
            $file->move('uploads/product/meta_image', $filename);
            $product->meta_image = $filename;
        }
        $product->save();
        DB::transaction(function () use ($request, $product, $category_pro, $addon_pro, $related_pro) {
//            dd($request->all(),$request->product_videos);
//            dd($request->product_videos['url']);
//            $product_video = Product_video::findOrfail($request->product_videos->id);
//            $product_video = Product_video::findOrfail($request->product_videos['id']);
//            $product_video->url = $request->product_videos['url'];
//            $product_video->save();
////            $product_video->url = $request->product_videos->url;
//            $product_video->save();

            Category_master::where('product_id', $product->id)->delete();
            if($category_pro !== '') {
                $product_category = explode(',', $category_pro);
                foreach ($product_category as $separate_tag) {
                    $product_category_master = new Category_master;
                    $product_category_master->product_id = $product->id;
                    $product_category_master->category_id = $separate_tag;
                    $product_category_master->save();
                }
            }
//            Addon_master::where('product_id', $product->id)->delete();
//            if($addon_pro !== '') {
//                $addon = explode(',', $addon_pro);
//                foreach ($addon as $separate_tag1) {
//                    $addon_master = new Addon_master();
//                    $addon_master->product_id = $product->id;
//                    $addon_master->addon_id = $separate_tag1;
//                    $addon_master->save();
//                }
//            }
//            Related_product_master::where('product_id', $product->id)->delete();
//            if($related_pro !== '') {
//                $related_product = explode(',', $related_pro);
//                foreach ($related_product as $separate_tag2) {
//                    $related_product_master = new Related_product_master();
//                    $related_product_master->product_id = $product->id;
//                    $related_product_master->related_product_id = $separate_tag2;
//                    $related_product_master->save();
//                }
//            }

            //------------------Building Image Uploads------------------------

            if ($request->uploads != null) {
                $file = $request->file('uploads');

                foreach ($file as $img) {
                    $file = $img;
                    $destinationPath = public_path('uploads/product/product_gallery');
                    if (!file_exists($destinationPath)) {
                        mkdir($destinationPath, 0777, true);
                    }

                    $fileName = time() . '_' . $file->getClientOriginalName();
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(800, 800, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileName);

                    $fileNameM = 'md_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(300, 300, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameM);

                    $fileNameS = 'sm_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(100, 100, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameS);

//    Product_Image add
                    $product_image = new Product_Image();
                    $product_image->products = $product->id;
                    $product_image->images = $fileName;
                    $product_image->md_images = $fileNameM;
                    $product_image->sm_images = $fileNameS;
                    $product_image->save();

//    Product_Gallery add
                    $product_gallery = new Product_Gallery();
                    $product_gallery->create_date = now();
                    $product_gallery->added_by = Auth::user()->name;
                    $product_gallery->product_img = $fileName;
                    $product_gallery->save();

//                    $product_video = new Product_video();
//                    $product_video->products = $product->id;
//                    $product_video->url = $request->url;
////                dd($product);
//                    $product_video->save();

                }
//                foreach ($file as $image) {
//                    $building_image = new Product_Image();
//                    $name = str::random(10) . '.' . $image->extension();
//                    $building_image->products = $product->id;
//                    $building_image->title = $image->getClientOriginalName();
//                    $building_image->images = $name;
////                    $building_image->size = $image->getSize();
////                    $building_image->type = $image->extension();
//                    $image->move($path, $name);
//                    $building_image->save();
//                }
            }

            if ($request->deleted_media != null) {
                foreach ($request->deleted_media as $deleted_media) {
                    Product_Image::where('images', $deleted_media)->delete();
                }
            }

            //------------------Building Image Uploads------------------------
//            return $model;
        });


        return response()
            ->json(['saved' => true, 'id']);
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);

        $product->delete();

        return response()
            ->json(['deleted' => true]);
    }

    public function attributedestroy($id)
    {
//        dd($id);
//        dd(request()->all());
        $data = Product::findOrFail($id);
//        $data->deleted = 1;
        DB::transaction(function () use ($id, $data) {
            $data1 = ProductAttribute::where('products', $id)->delete();

        });


        $data->delete();

        return response()
            ->json(['deleted' => true]);
    }

    public function attributedestroyimg($id)
    {
//        dd($id);
//        dd(request()->all());
        $data = Product_Image::findOrFail($id);
//        dd($data->images);
//        $destination = 'uploads/product/child_image/' . $data->images;


//        $destination = 'uploads/product/image_gallery/' . $data->images;
//        if (File::exists($destination)) {
//            File::delete($destination);
//        }
//       $a=  File::delete(public_path('uploads/product/child_image'. $data['images']));
        $data->delete();

        return response()
            ->json(['deleted' => true]);
    }

    public function child_update(Request $request)
    {

//        dd(request()->all());
        $data = Product::findOrFail($request->id);
//        dd($request->id);
//        $data = Product::where('products', $request->id)->get();
//        $data = ProductAttribute::where('products', $request->id)->get();
        $data->price = $request->price;
        $data->discounted = $request->discounted;
        $data->product_qty = $request->product_qty;
        $data->model_no = $request->model_no;
        $ids = $request->id;
        DB::transaction(function () use ($ids, $data, $request) {
            $data1 = ProductAttribute::where('products', $ids)->get();
            foreach ($data1 as $item) {
                $item->sku = $request->sku ? $request->sku : 0;
                $item->status = $request->status;
                $item->save();
            }

//            Product_Image save

            if ($request->images != null) {
                $file = $request->file('images');

                foreach ($file as $img) {
                    $file = $img;
                    $destinationPath = public_path('uploads/product/product_gallery');
                    if (!file_exists($destinationPath)) {
                        mkdir($destinationPath, 0777, true);
                    }

                    $fileName = time() . '_' . $file->getClientOriginalName();
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(800, 800, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileName);

                    $fileNameM = 'md_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(300, 300, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameM);

                    $fileNameS = 'sm_'.$fileName;
                    $imgFile = \Intervention\Image\Facades\Image::make($file->getRealPath());
                    $imgFile->resize(100, 100, function ($constraint) {
                        $constraint->aspectRatio();
                    })->save($destinationPath . '/' . $fileNameS);

//    Product_Image add
                    $product_image = new Product_Image();
                    $product_image->products = $request->id;
                    $product_image->images = $fileName;
                    $product_image->md_images = $fileNameM;
                    $product_image->sm_images = $fileNameS;
                    $product_image->save();

//    Product_Gallery add
                    $product_gallery = new Product_Gallery();
                    $product_gallery->create_date = now();
                    $product_gallery->added_by = Auth::user()->name;
                    $product_gallery->product_img = $fileName;
                    $product_gallery->save();

                }

//                foreach ($file as $image) {
//                    $product_image = new Product_Image();
//                    $name = str::random(10) . '.' . $image->extension();
//                    $product_image->products = $request->id;
////                    $product_image->title = $image->getClientOriginalName();
//                    $product_image->images = $name;
////                    $product_image->size = $image->getSize();
////                    $product_image->type = $image->extension();
//                    $image->move($path, $name);
//                    $product_image->save();
//                }
            }


        });
        $data->update();
        return response()
            ->json(['saved' => true]);
    }
}
